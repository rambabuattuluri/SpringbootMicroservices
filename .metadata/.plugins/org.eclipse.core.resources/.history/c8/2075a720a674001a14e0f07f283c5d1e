package com.springboot.microservice.CurrencyConversionFactor;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@SpringBootApplication
@RestController
public class CurrencyConversionController {
	
	@Autowired
	ConversionFactorService conversionFactorService;
	
	@RequestMapping(path = "/addConversionFactor/", method=RequestMethod.POST)
    public String addNewConversionFactor(@RequestBody ConversionFactorBean value) {
		conversionFactorService.addConversionFactor(value);
        return "AddNewRecord: " + "fromCountryCode: " + value.getFromCountryCode() + ", toCountryCode: " + value.getToCountryCode() + ", ConversionFactor: " + value.getConversionFactor() + "\n\n" + "ResponseStatus: " + HttpStatus.OK;
    }
	
	@RequestMapping(path = "/updateConversionFactor/", method=RequestMethod.PUT)
    public String updateExistingConversionFactor(@RequestBody ConversionFactorBean value) {
		conversionFactorService.updateConversionFactor(value);
        return "UpdatedExistingRecord: " + " fromCountryCode: " + value.getFromCountryCode() + ", ConversionFactor: " + value.getConversionFactor() + "\n\n" + "ResponseStatus: " + HttpStatus.OK;
    }
	
	@RequestMapping(path = "/getAllConversionFactors/")
	public List<ConversionFactorBean> getAllConversionFactors()
	{
		return conversionFactorService.getAll();
	}
		
	@RequestMapping(path = "/getConversionFactor/fromCountryCode/{fromCountryCode}")
    public ConversionFactorBean findConversionFactorByFromCountryCode(@PathVariable("fromCountryCode") String fromCountryCode) {  
        return conversionFactorService.getConversionFactorByFromCountryCode(fromCountryCode);
    }
	
	@RequestMapping(path = "/getConversionFactor/id/{Id}")
    public double findConversionFactorById(@PathVariable("Id") Long id) {  
        return conversionFactorService.getConversionFactorById(id).getConversionFactor();
    }
	/*
	 * @RequestMapping(path = "/getConversionFactor/id/{Id}") 
	 * public ConversionFactorValue findConversionFactorById(@PathVariable("Id") Long id) {
	 * return conversionFactorService.getConversionFactorById(id); }
	 */

}
